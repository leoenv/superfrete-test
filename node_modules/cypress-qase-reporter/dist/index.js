"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
/* eslint-disable no-console */
/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/unbound-method */
var src_1 = require("qaseio/dist/src");
var mocha_1 = require("mocha");
var child_process_1 = require("child_process");
var qaseio_1 = require("qaseio");
var chalk_1 = __importDefault(require("chalk"));
var fs_1 = require("fs");
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
var _a = mocha_1.Runner.constants, EVENT_TEST_FAIL = _a.EVENT_TEST_FAIL, EVENT_TEST_PASS = _a.EVENT_TEST_PASS, EVENT_TEST_PENDING = _a.EVENT_TEST_PENDING, EVENT_RUN_END = _a.EVENT_RUN_END;
var Envs;
(function (Envs) {
    Envs["report"] = "QASE_REPORT";
    Envs["apiToken"] = "QASE_API_TOKEN";
    Envs["basePath"] = "QASE_API_BASE_URL";
    Envs["projectCode"] = "QASE_PROJECT_CODE";
    Envs["runId"] = "QASE_RUN_ID";
    Envs["runName"] = "QASE_RUN_NAME";
    Envs["runDescription"] = "QASE_RUN_DESCRIPTION";
    Envs["environmentId"] = "QASE_ENVIRONMENT_ID";
    Envs["screenshotFolder"] = "QASE_SCREENSHOT_FOLDER";
    Envs["sendScreenshot"] = "QASE_SCREENSHOT_SENDING";
    Envs["runComplete"] = "QASE_RUN_COMPLETE";
    Envs["rootSuiteTitle"] = "QASE_ROOT_SUITE_TITLE";
})(Envs || (Envs = {}));
var CypressQaseReporter = /** @class */ (function (_super) {
    __extends(CypressQaseReporter, _super);
    function CypressQaseReporter(runner, options) {
        var _this = _super.call(this, runner, options) || this;
        _this.testCasesForPublishingCount = 0;
        _this.pending = [];
        _this.shouldPublish = [];
        _this.results = [];
        _this.isDisabled = false;
        _this.resultsForPublishing = [];
        _this.options = options.reporterOptions;
        _this.options.rootSuiteTitle = CypressQaseReporter.getEnv(Envs.rootSuiteTitle) ||
            options.reporterOptions.rootSuiteTitle
            || '';
        _this.options.projectCode = options.reporterOptions.projectCode || CypressQaseReporter.getEnv(Envs.projectCode);
        _this.api = new qaseio_1.QaseApi(_this.options.apiToken || CypressQaseReporter.getEnv(Envs.apiToken) || '', CypressQaseReporter.getEnv(Envs.basePath) || _this.options.basePath, CypressQaseReporter.createHeaders());
        if (!CypressQaseReporter.getEnv(Envs.report)) {
            return _this;
        }
        _this.log(chalk_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["{yellow Current PID: ", "}"], ["{yellow Current PID: ", "}"])), process.pid));
        _this.addRunnerListeners(runner);
        void _this.checkProject(_this.options.projectCode, function (prjExists) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!prjExists) return [3 /*break*/, 5];
                        this.log(chalk_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["{green Project ", " exists}"], ["{green Project ", " exists}"])), this.options.projectCode));
                        if (!(CypressQaseReporter.getEnv(Envs.runId) || this.options.runId)) return [3 /*break*/, 2];
                        this.saveRunId(CypressQaseReporter.getEnv(Envs.runId) || this.options.runId);
                        return [4 /*yield*/, this.checkRun(this.runId, function (runExists) {
                                var run = _this.runId;
                                if (runExists) {
                                    _this.log(chalk_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["{green Using run ", " to publish test results}"], ["{green Using run ", " to publish test results}"])), run));
                                }
                                else {
                                    _this.log(chalk_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["{red Run ", " does not exist}"], ["{red Run ", " does not exist}"])), run));
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!!this.runId) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.createRun(CypressQaseReporter.getEnv(Envs.runName), CypressQaseReporter.getEnv(Envs.runDescription), function (created) {
                                var _a;
                                if (created) {
                                    _this.runId = (_a = created.result) === null || _a === void 0 ? void 0 : _a.id;
                                    process.env.QASE_RUN_ID = String(_this === null || _this === void 0 ? void 0 : _this.runId);
                                    _this.log(chalk_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["{green Using run ", " to publish test results}"], ["{green Using run ", " to publish test results}"])), _this.runId));
                                }
                                else {
                                    _this.log(chalk_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject(["{red Could not create run in project ", "}"], ["{red Could not create run in project ", "}"])), _this.options.projectCode));
                                    _this.isDisabled = true;
                                }
                            })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        this.log(chalk_1.default(templateObject_7 || (templateObject_7 = __makeTemplateObject(["{red Project ", " does not exist}"], ["{red Project ", " does not exist}"])), this.options.projectCode));
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        }); });
        return _this;
    }
    CypressQaseReporter.getEnv = function (name) {
        return process.env[name];
    };
    CypressQaseReporter.getCaseId = function (test) {
        var regexp = /(\(Qase ID: ([\d,]+)\))/;
        var results = regexp.exec(test.title);
        if (results && results.length === 3) {
            return results[2].split(',').map(function (value) { return Number.parseInt(value, 10); });
        }
        return [];
    };
    CypressQaseReporter.createRunObject = function (name, cases, args) {
        return __assign({ title: name, cases: cases }, args);
    };
    CypressQaseReporter.createHeaders = function () {
        var nodeVersion = process.version, os = process.platform, arch = process.arch;
        var npmVersion = child_process_1.execSync('npm -v', { encoding: 'utf8' }).replace(/['"\n]+/g, '');
        var qaseapiVersion = CypressQaseReporter.getPackageVersion('qaseio');
        var cypressVersion = CypressQaseReporter.getPackageVersion('cypress');
        var cypressCaseReporterVersion = this.getPackageVersion('cypress-qase-reporter');
        var xPlatformHeader = "node=" + nodeVersion + "; npm=" + npmVersion + "; os=" + os + "; arch=" + arch;
        var xClientHeader = "cypress=" + cypressVersion + "; qase-cypress=" + cypressCaseReporterVersion + "; qaseapi=" + qaseapiVersion;
        return {
            'X-Client': xClientHeader,
            'X-Platform': xPlatformHeader,
        };
    };
    CypressQaseReporter.getSuitePath = function (suite) {
        if (suite.parent) {
            var parentSuite = String(CypressQaseReporter.getSuitePath(suite.parent));
            if (parentSuite) {
                return parentSuite + '\t' + String(suite === null || suite === void 0 ? void 0 : suite.title);
            }
            else {
                return String(suite === null || suite === void 0 ? void 0 : suite.title);
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return suite.title;
    };
    CypressQaseReporter.getPackageVersion = function (name) {
        var UNDEFINED = 'undefined';
        try {
            var pathToPackageJson = require.resolve(name + "/package.json", {
                paths: [process.cwd()],
            });
            if (pathToPackageJson) {
                try {
                    var packageString = fs_1.readFileSync(pathToPackageJson, {
                        encoding: 'utf8',
                    });
                    if (packageString) {
                        var packageObject = JSON.parse(packageString);
                        return packageObject.version;
                    }
                    return UNDEFINED;
                }
                catch (error) {
                    return UNDEFINED;
                }
            }
        }
        catch (error) {
            return UNDEFINED;
        }
    };
    CypressQaseReporter.prototype.log = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.options.logging) {
            console.log.apply(console, __spreadArrays([chalk_1.default(templateObject_8 || (templateObject_8 = __makeTemplateObject(["{bold {blue qase:}} ", ""], ["{bold {blue qase:}} ", ""])), message)], optionalParams));
        }
    };
    CypressQaseReporter.prototype.addRunnerListeners = function (runner) {
        var _this = this;
        runner.on(EVENT_TEST_PASS, function (test) {
            _this.transformCaseResultToBulkObject(test, src_1.ResultCreateStatusEnum.PASSED);
        });
        runner.on(EVENT_TEST_PENDING, function (test) {
            _this.transformCaseResultToBulkObject(test, src_1.ResultCreateStatusEnum.SKIPPED);
        });
        runner.on(EVENT_TEST_FAIL, function (test) {
            _this.transformCaseResultToBulkObject(test, src_1.ResultCreateStatusEnum.FAILED);
        });
        runner.addListener(EVENT_RUN_END, function () {
            if (_this.resultsForPublishing.length === 0) {
                _this.log('Nothing to send.');
            }
            else if (_this.runId) {
                var config = {
                    apiToken: CypressQaseReporter.getEnv(Envs.apiToken) || _this.options.apiToken || '',
                    basePath: CypressQaseReporter.getEnv(Envs.basePath) || _this.options.basePath,
                    headers: CypressQaseReporter.createHeaders(),
                    code: _this.options.projectCode,
                    runId: Number(_this.runId),
                    body: {
                        results: _this.resultsForPublishing,
                    },
                    runComplete: CypressQaseReporter.getEnv(Envs.runComplete) || _this.options.runComplete || false,
                };
                var screenshotsConfig = {
                    screenshotFolder: CypressQaseReporter.getEnv(Envs.screenshotFolder)
                        || _this.options.screenshotFolder
                        || 'screenshots',
                    sendScreenshot: CypressQaseReporter.getEnv(Envs.screenshotFolder)
                        || _this.options.sendScreenshot
                        || false,
                };
                child_process_1.spawnSync('node', [__dirname + "/reportBulk.js"], {
                    stdio: 'inherit',
                    env: Object.assign(process.env, {
                        reporting_config: JSON.stringify(config),
                        screenshots_config: JSON.stringify(screenshotsConfig),
                    }),
                });
            }
        });
    };
    CypressQaseReporter.prototype.checkProject = function (projectCode, cb) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resp, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.api.projects.getProject(projectCode)];
                    case 1:
                        resp = _b.sent();
                        return [4 /*yield*/, cb(Boolean((_a = resp.data.result) === null || _a === void 0 ? void 0 : _a.code))];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _b.sent();
                        this.log(err_1);
                        this.isDisabled = true;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CypressQaseReporter.prototype.createRun = function (name, description, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var environmentId, runObject, res, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        environmentId = Number(CypressQaseReporter.getEnv(Envs.environmentId)) ||
                            this.options.environmentId;
                        runObject = CypressQaseReporter.createRunObject(name || "Automated run " + new Date().toISOString(), [], {
                            description: description || 'Cypress automated run',
                            environment_id: environmentId,
                            is_autotest: true,
                        });
                        return [4 /*yield*/, this.api.runs.createRun(this.options.projectCode, runObject)];
                    case 1:
                        res = _a.sent();
                        cb(res.data);
                        return [3 /*break*/, 3];
                    case 2:
                        err_2 = _a.sent();
                        this.log("Error on creating run " + err_2);
                        this.isDisabled = true;
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // eslint-disable-next-line @typescript-eslint/require-await
    CypressQaseReporter.prototype.checkRun = function (runId, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (runId === undefined) {
                    cb(false);
                    return [2 /*return*/];
                }
                return [2 /*return*/, this.api.runs
                        .getRun(this.options.projectCode, Number(runId))
                        .then(function (resp) {
                        var _a, _b;
                        _this.log("Get run result on checking run " + ((_a = resp.data.result) === null || _a === void 0 ? void 0 : _a.id));
                        cb(Boolean((_b = resp.data.result) === null || _b === void 0 ? void 0 : _b.id));
                    })
                        .catch(function (err) {
                        _this.log("Error on checking run " + err);
                        _this.isDisabled = true;
                    })];
            });
        });
    };
    CypressQaseReporter.prototype.saveRunId = function (runId) {
        this.runId = runId;
        if (this.runId) {
            while (this.pending.length) {
                this.log("Number of pending: " + this.pending.length);
                var cb = this.pending.shift();
                if (cb) {
                    cb(this.runId);
                }
            }
        }
    };
    CypressQaseReporter.prototype.logTestItem = function (test) {
        var map = {
            failed: chalk_1.default(templateObject_9 || (templateObject_9 = __makeTemplateObject(["{red Test ", " ", "}"], ["{red Test ", " ", "}"])), test.title, test.state),
            passed: chalk_1.default(templateObject_10 || (templateObject_10 = __makeTemplateObject(["{green Test ", " ", "}"], ["{green Test ", " ", "}"])), test.title, test.state),
            pending: chalk_1.default(templateObject_11 || (templateObject_11 = __makeTemplateObject(["{blueBright Test ", " ", "}"], ["{blueBright Test ", " ", "}"])), test.title, test.state),
        };
        if (test.state) {
            this.log(map[test.state]);
        }
    };
    CypressQaseReporter.prototype.transformCaseResultToBulkObject = function (test, status) {
        var _this = this;
        var _a;
        this.logTestItem(test);
        var caseIds = CypressQaseReporter.getCaseId(test);
        var caseObject = {
            status: status,
            time_ms: test.duration || 0,
            stacktrace: (_a = test.err) === null || _a === void 0 ? void 0 : _a.stack,
            comment: test.err ? test.err.name + ": " + test.err.message : '',
            defect: status === src_1.ResultCreateStatusEnum.FAILED,
        };
        if (caseIds.length === 0) {
            caseObject.case = {
                title: test.title,
                suite_title: this.options.rootSuiteTitle
                    ? this.options.rootSuiteTitle + "\t" + CypressQaseReporter.getSuitePath(test.parent)
                    : CypressQaseReporter.getSuitePath(test.parent),
            };
            this.resultsForPublishing.push(caseObject);
            this.log(chalk_1.default(templateObject_12 || (templateObject_12 = __makeTemplateObject(["{gray Result prepared for publish: ", " }"], ["{gray Result prepared for publish: ", " }"])), test.title));
        }
        else {
            caseIds.forEach(function (caseId) {
                var caseObjectWithId = __assign({ case_id: caseId }, caseObject);
                _this.resultsForPublishing.push(caseObjectWithId);
            });
        }
    };
    return CypressQaseReporter;
}(mocha_1.reporters.Base));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12;
module.exports = CypressQaseReporter;
//# sourceMappingURL=index.js.map